{
    "slots":{
        "0":{"name":"hpScreen","type":{"events":[],"methods":[]}},
        "1":{"name":"slot2","type":{"events":[],"methods":[]}},
        "2":{"name":"slot3","type":{"events":[],"methods":[]}},
        "3":{"name":"slot4","type":{"events":[],"methods":[]}},
        "4":{"name":"slot5","type":{"events":[],"methods":[]}},
        "5":{"name":"slot6","type":{"events":[],"methods":[]}},
        "6":{"name":"slot7","type":{"events":[],"methods":[]}},
        "7":{"name":"slot8","type":{"events":[],"methods":[]}},
        "8":{"name":"slot9","type":{"events":[],"methods":[]}},
        "9":{"name":"slot10","type":{"events":[],"methods":[]}},
        "-1":{"name":"unit","type":{"events":[],"methods":[]}},
        "-2":{"name":"system","type":{"events":[],"methods":[]}},
        "-3":{"name":"library","type":{"events":[],"methods":[]}}
    },
    "handlers":[
        {"code":"\n_G.hpOutline = {\n    name = \"Pocket Scout\"\n}\n\n_G.hpOutline.SVG_TOP = [[<svg viewBox=\"-661.250000 -687.5 1347.500000 1350\" scaleMultiplier=\"100\"><style>#outline path{stroke:#777777;stroke-width:2px;}circle{stroke:black;stroke-width:6.59;}.selected{stroke:white;}</style><g id=\"outline\" transform=\"translate(12.5,-12.5)\"><path fill=\"#0e1111\" d=\"M -100,625 L -150,600 -150,131.25 -125,125 -100,75 -100,-150 -125,-250 -125,-425 -25,-625 25,-625 125,-425 125,-250 100,-150 100,75 125,125 150,131.25 150,600 100,625 Z\"/><path fill=\"#7f878b\" d=\"M -50,625 -50,375 -100,175 -100,-225 -25,-525 25,-525 100,-225 100,175 50,375 50,625 Z\"/><path fill=\"#1b2b0d\" d=\"M -25,-625 L -25,0 C -25,25 -50,50 -50,75 L 50,75 C 50,50 25,25 25,0 L 25,-625 Z M -25,625 L -25,250 25,250 25,625 Z\"/><path fill=\"#000000\" d=\"M 50,75 L 50,225 25,250 -25,250 -50,225 -50,75 Z\"/></g><g id=\"pointCloud\"/></svg>]]\n_G.hpOutline.SVG_SIDE = [[<svg viewBox=\"-662.5 -158.383561 1350 437.450339\" scaleMultiplier=\"100\"><style>#outline path{stroke:#777777;stroke-width:2px;}circle{stroke:black;stroke-width:2.19;}.selected{stroke:white;}</style><g id=\"outline\" transform=\"translate(12.5,-12.5)\"><path fill=\"#0e1111\" d=\"M -625,225 L -600,250 625,250 Q 625,150 550,131.25 L 225,50 -225,50 -250,25 -625,25 Z\"/><path fill=\"#7f878b\" d=\"M -625,125 L -200,125 C 0,125 -25,200 75,200 L 525,200 525,125 550,131.25 225,50 -225,50 -250,25 -625,25 Z\"/><path fill=\"#1b2b0d\" d=\"M 525,200 L 618.75,200 Q 610,150 550,131.25 L 525,125 Z\"/></g><g id=\"pointCloud\"/></svg>]]\n_G.hpOutline.SVG_FRONT = nil\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},
        {"code":"---------------------------\n-- Ship Health Display   --\n--   By W3asel (1337joe) --\n---------------------------\n-- Bundled: 2022-06-13T14:13:51Z\n-- Latest version always available at: https://1337joe.github.io/du-ship-displays\n\n-- container for shared state for ship health controller\n_G.hpController = {}\n\n-------------------------\n-- Begin Configuration --\n-------------------------\nlocal hpUpdateRate = 0.5 --export: How often (in seconds) to update ship health data and refresh screen. Raise this number if running the script causes lower framerate.\nlocal SHIP_NAME_DEFAULT = \"use_default\"\nlocal hpShipName = \"use_default\" --export: Ship Name, if left \"use_default\" will use ship outline name or id for no outline.\n\n-- slot definitions\n_G.hpController.slots = {}\n_G.hpController.slots.core = core -- if not found by name will autodetect\n_G.hpController.slots.screen = hpScreen -- if not found by name will autodetect\n_G.hpController.slots.databank = databank -- if not found by name will autodetect\n\n-----------------------\n-- End Configuration --\n-----------------------\n\n-- link missing slot inputs / validate provided slots\nlocal slots = _G.hpController.slots\nlocal module = \"ship-health\"\nslots.screen = _G.Utilities.loadSlot(slots.screen, \"ScreenUnit\", nil, module, \"screen\")\nslots.screen.activate()\nslots.core = _G.Utilities.loadSlot(slots.core, {\"CoreUnitDynamic\", \"CoreUnitStatic\", \"CoreUnitSpace\"}, slots.screen,\n                 module, \"core\")\nslots.databank = _G.Utilities.loadSlot(slots.databank, \"DataBankUnit\", slots.screen, module, \"databank\", true,\n                     \"No databank found, controller state will not persist between sessions.\")\n\n-- hide widgets\nunit.hide()\n\nlocal core = slots.core\nlocal screen = slots.screen\nlocal databank = slots.databank\n\n-- load preferences, either from databank or exported parameters\nlocal HP_UPDATE_RATE_KEY = \"HP.unit:UPDATE_RATE\"\nlocal HP_UPDATE_RATE = _G.Utilities.getPreference(databank, HP_UPDATE_RATE_KEY, hpUpdateRate)\nlocal SHIP_NAME_KEY = \"HP.unit:SHIP_NAME\"\nif string.len(hpShipName) == 0 or hpShipName == SHIP_NAME_DEFAULT then\n    if _G.outline and _G.outline.name then\n        hpShipName = _G.outline.name\n    else\n        hpShipName = string.format(\"%d\", core.getConstructId())\n    end\nend\n_G.hpController.shipName = _G.Utilities.getPreference(databank, SHIP_NAME_KEY, hpShipName)\n\n-- define controller-level keys\nlocal SELECTED_ELEMENT_KEY = \"HP.unit:SELECTED_ELEMENT\"\n\n_G.hpController.elementData = {}\n_G.hpController.elementMetadata = {}\n_G.hpController.arrowOffsetDistance = 4\n\nlocal initializationComplete = false\nlocal function loadElementData()\n    local INIT_TEMPLATE = [[Initializing: %d of %d loaded]]\n    local elementKeys = core.getElementIdList()\n    local elementsBetweenBreaks = 50\n\n    local coreMaxHp = core.getMaxHitPoints()\n    local centerOffset = 128\n    if coreMaxHp < 150 then\n        centerOffset = 16\n        _G.hpController.arrowOffsetDistance = 1\n    elseif coreMaxHp < 1100 then\n        centerOffset = 32\n        _G.hpController.arrowOffsetDistance = 1.5\n    elseif coreMaxHp < 10000 then\n        centerOffset = 64\n        _G.hpController.arrowOffsetDistance = 2\n    end\n\n    local min = {}\n    local max = {}\n    local totalHp = 0\n    local totalMaxHp = 0\n\n    local tPos, hp, mhp, pos\n    for index, key in pairs(elementKeys) do\n        tPos = core.getElementPositionById(key)\n        pos = {}\n        pos.x = tPos[1] - centerOffset\n        pos.y = tPos[2] - centerOffset\n        pos.z = tPos[3] - centerOffset\n\n        mhp = core.getElementMaxHitPointsById(key)\n        hp = core.getElementHitPointsById(key)\n        _G.hpController.elementData[key] = {\n            n = core.getElementNameById(key),\n            t = core.getElementTypeById(key),\n            p = pos,\n            r = core.getElementRotationById(key),\n            m = mhp,\n            h = hp,\n        }\n\n        -- track metadata\n        if not min.x or pos.x < min.x then\n            min.x = pos.x\n        end\n        if not max.x or pos.x > max.x then\n            max.x = pos.x\n        end\n        if not min.y or pos.y < min.y then\n            min.y = pos.y\n        end\n        if not max.y or pos.y > max.y then\n            max.y = pos.y\n        end\n        if not min.z or pos.z < min.z then\n            min.z = pos.z\n        end\n        if not max.z or pos.z > max.z then\n            max.z = pos.z\n        end\n        if not min.hp or mhp < min.hp then\n            min.hp = mhp\n        end\n        if not max.hp or mhp > max.hp then\n            max.hp = mhp\n        end\n        totalHp = totalHp + hp\n        totalMaxHp = totalMaxHp + mhp\n\n        if index % elementsBetweenBreaks == 0 then\n            -- show progress\n            screen.setCenteredText(string.format(INIT_TEMPLATE, index, #elementKeys))\n\n            coroutine.yield()\n        end\n    end\n\n    _G.hpController.elementMetadata.min = min\n    _G.hpController.elementMetadata.max = max\n    _G.hpController.elementMetadata.totalHp = totalHp\n    _G.hpController.elementMetadata.totalMaxHp = totalMaxHp\n\n    initializationComplete = true\nend\n\nlocal initCoroutine = coroutine.create(loadElementData)\n\n-- declare methods\nlocal INIT_TIMER_KEY = \"initHp\"\nfunction _G.hpController:finishInitialize()\n    if not initializationComplete then\n        local ok, message = coroutine.resume(initCoroutine)\n        if not ok then\n            error(string.format(\"Initialization coroutine failed: %s\", message))\n        end\n        return\n    else\n        unit.stopTimer(INIT_TIMER_KEY)\n    end\n\n    -- init screen\n    _G.hpScreenController:init(_G.hpController)\n\n    -- init stored values\n    if databank and databank.hasKey(SELECTED_ELEMENT_KEY) == 1 then\n        self:select(databank.getIntValue(SELECTED_ELEMENT_KEY))\n    else\n        self:select(nil)\n    end\n\n    _G.hpController:updateState()\n\n    -- schedule updating\n    unit.setTimer(\"updateHp\", HP_UPDATE_RATE)\nend\n\n-- call repeatedly until finished\nunit.setTimer(INIT_TIMER_KEY, 0)\n\nfunction _G.hpController:updateState()\n    -- TODO - determine if this needs to be in a background coroutine for large ships\n    -- update all hp\n    local currentTotalHp = 0\n    local hp\n    for _, key in pairs(core.getElementIdList()) do\n        hp = core.getElementHitPointsById(key)\n        self.elementData[key].h = hp\n        currentTotalHp = currentTotalHp + hp\n\n        -- TODO test code, remove\n        if math.random() > 0.9 then\n            -- self:select(key)\n        end\n    end\n    self.elementMetadata.totalHp = currentTotalHp\n\n    -- sync between users if someone else selects an element\n    if self.databank and self.databank.getIntValue(SELECTED_ELEMENT_KEY) ~= self.selectedElement then\n        self:select(self.databank.getIntValue(SELECTED_ELEMENT_KEY))\n    end\n\n    -- signal draw of screen with updated state\n    _G.hpScreenController.needRefresh = true\nend\n\nlocal stickerIds = {}\n--- Selects the provided elementId, or deselects the current element if provided nil or an unknown id.\nfunction _G.hpController:select(elementId)\n    -- clear existing stickers\n    for _, stickerId in pairs(stickerIds) do\n        core.deleteSticker(stickerId)\n    end\n\n    -- persist selection in case of restart of board\n    if elementId == nil then\n        elementId = 0\n    end\n    if databank then\n        -- can't unset value in database but 0 is out of range\n        databank.setIntValue(SELECTED_ELEMENT_KEY, elementId)\n    end\n    self.selectedElement = elementId\n\n    -- skip remaining if no valid element actually selected\n    if not self.elementData[elementId] then\n        return\n    end\n\n    local elementPos = self.elementData[elementId].p\n\n    -- draw arrows on element\n    -- TODO scale by mass of target instead of core size?\n    local offset = self.arrowOffsetDistance\n    stickerIds = {\n        core.spawnArrowSticker(elementPos.x + offset, elementPos.y, elementPos.z, \"north\"),\n        core.spawnArrowSticker(elementPos.x - offset, elementPos.y, elementPos.z, \"south\"),\n        core.spawnArrowSticker(elementPos.x, elementPos.y + offset, elementPos.z, \"west\"),\n        core.spawnArrowSticker(elementPos.x, elementPos.y - offset, elementPos.z, \"east\"),\n        core.spawnArrowSticker(elementPos.x, elementPos.y, elementPos.z + offset, \"down\"),\n        core.spawnArrowSticker(elementPos.x, elementPos.y, elementPos.z - offset, \"up\"),\n        core.spawnArrowSticker(elementPos.x + offset * 2, elementPos.y, elementPos.z, \"north\"),\n        core.spawnArrowSticker(elementPos.x - offset * 2, elementPos.y, elementPos.z, \"south\"),\n        core.spawnArrowSticker(elementPos.x, elementPos.y + offset * 2, elementPos.z, \"west\"),\n        core.spawnArrowSticker(elementPos.x, elementPos.y - offset * 2, elementPos.z, \"east\"),\n    }\n    -- rotate for visibility (so opposite arrows aren't in same plane and won't vanish at the same angle)\n    core.rotateSticker(stickerIds[1], 45, 90, 0)\n    core.rotateSticker(stickerIds[2], -45, -90, 0)\n    core.rotateSticker(stickerIds[3], -90, 0, -45)\n    core.rotateSticker(stickerIds[4], 90, 0, -45)\n    core.rotateSticker(stickerIds[5], 0, 0, 45)\n    core.rotateSticker(stickerIds[6], 180, 0, 45)\n    core.rotateSticker(stickerIds[7], -45, 90, 0)\n    core.rotateSticker(stickerIds[8], 45, -90, 0)\n    core.rotateSticker(stickerIds[9], -90, 0, 45)\n    core.rotateSticker(stickerIds[10], 90, 0, 45)\n\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},
        {"code":"_G.hpController:finishInitialize()","filter":{"args":[{"value":"initHp"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},
        {"code":"_G.hpController:updateState()","filter":{"args":[{"value":"updateHp"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},
        {"code":"--- Run first, define agScreenController basic functionality: SVG-specific definitions and functions are not included.\n\n-- Guard to keep this module from reinitializing any time the start event fires.\nif _G.hpScreenController then\n    return\nend\n\n-- constants and editable lua script parameters\n\nlocal SHOW_HEALTHY_KEY = \"HP.screen:SHOW_HEALTHY\"\nlocal SHOW_HEALTHY_DEFAULT = true\nlocal SHOW_DAMAGED_KEY = \"HP.screen:SHOW_DAMAGED\"\nlocal SHOW_DAMAGED_DEFAULT = true\nlocal SHOW_BROKEN_KEY = \"HP.screen:SHOW_BROKEN\"\nlocal SHOW_BROKEN_DEFAULT = true\nlocal SELECTED_TAB_KEY = \"HP.screen:SELECTED_TAB\"\nlocal SELECTED_TAB_DEFAULT = 1\nlocal SORT_COLUMN_KEY = \"HP.screen:SORT_COLUMN\"\nlocal SORT_COLUMN_DEFAULT = 5\nlocal SORT_UP_KEY = \"HP.screen:SORT_UP\"\nlocal SORT_UP_DEFAULT = true\nlocal SCROLL_INDEX_KEY = \"HP.screen:SCROLL_INDEX\"\nlocal SCROLL_INDEX_DEFAULT = 1\nlocal STRECH_CLOUD_KEY = \"HP.screen:STRETCH_CLOUD\"\nlocal STRETCH_CLOUD_DEFAULT = false\nlocal MAXIMIZE_CLOUD_KEY = \"HP.screen:MAXIMIZE_CLOUD\"\nlocal MAXIMIZE_CLOUD_DEFAULT = false\n\n-- constants for svg file\nlocal HEALTHY_CLASS = \"healthy\"\nlocal DAMAGED_CLASS = \"damaged\"\nlocal BROKEN_CLASS = \"broken\"\nlocal SELECTED_CLASS = \"selected\"\nlocal HIDDEN_CLASS = \"hidden\"\nlocal MOUSE_OVER_CLASS = \"mouseOver\"\nlocal ELEMENT_TITLE_COLOR_CLASS = \"titleColor\"\nlocal ELEMENT_FILTER_HEALTHY_CLASS = \"healthyFilterClass\"\nlocal ELEMENT_FILTER_DAMAGED_CLASS = \"damagedFilterClass\"\nlocal ELEMENT_FILTER_BROKEN_CLASS = \"brokenFilterClass\"\nlocal ELEMENT_COUNT_DAMAGED_CLASS = \"damagedCountClass\"\nlocal ELEMENT_COUNT_HEALTHY_CLASS = \"healthyCountClass\"\nlocal ELEMENT_COUNT_BROKEN_CLASS = \"brokenCountClass\"\nlocal ELEMENT_TABLE_CLASS = \"tableClass\"\nlocal ELEMENT_TOP_CLASS = \"topClass\"\nlocal ELEMENT_SIDE_CLASS = \"sideClass\"\nlocal ELEMENT_FRONT_CLASS = \"frontClass\"\nlocal ELEMENT_HIDDEN_TABLE_INTERFACE = \"hiddenTableInterface\"\nlocal ELEMENT_TABLE_INTERFACE = \"tableInterface\"\nlocal ELEMENT_SORT_ID_CLASS = \"sortIdClass\"\nlocal ELEMENT_SORT_NAME_CLASS = \"sortNameClass\"\nlocal ELEMENT_SORT_DMG_CLASS = \"sortDmgClass\"\nlocal ELEMENT_SORT_MAX_CLASS = \"sortMaxClass\"\nlocal ELEMENT_SORT_INT_CLASS = \"sortIntClass\"\nlocal ELEMENT_SKIP_UP_CLASS = \"skipUpClass\"\nlocal ELEMENT_SCROLL_UP_CLASS = \"scrollUpClass\"\nlocal ELEMENT_SCROLL_DOWN_CLASS = \"scrollDownClass\"\nlocal ELEMENT_SKIP_DOWN_CLASS = \"skipDownClass\"\nlocal ELEMENT_TABLE_ROW_CLASS = \"tableRow\"\nlocal ELEMENT_HIDDEN_CLOUD_BUTTONS = \"hiddenCloudButtonBar\"\nlocal ELEMENT_CLOUD_BUTTONS = \"cloudButtonBar\"\nlocal ELEMENT_CLOUD_STRETCH = \"stretchClass\"\nlocal ELEMENT_CLOUD_PRESERVE = \"preserveClass\"\nlocal ELEMENT_CLOUD_MAXIMIZE = \"maximizeClass\"\nlocal ELEMENT_CLOUD_MINIMIZE = \"minimizeClass\"\nlocal ELEMENT_HIDE_INTERFACE = \"hideInterface\"\n\nlocal TAB_CONTENTS_WIDTH = 1152\nlocal TAB_CONTENTS_HEIGHT = 891\n\nlocal TAB_CONTENTS_TAG = [[<svg id=\"tabContents\"/>]]\nlocal MAXIMIZED_CONTENTS_TAG = [[<svg id=\"maximizedContents\"/>]]\n\n-- initialize object and fields\n_G.hpScreenController = {\n    mouse = {\n        x = -1,\n        y = -1,\n        pressed = nil,\n        state = false,\n        over = nil\n    },\n    needRefresh = false,\n}\n\n-- constant button definition labels\n_G.hpScreenController.BUTTON_FILTER_HEALTHY = \"Filter: Healthy\"\n_G.hpScreenController.BUTTON_FILTER_DAMAGED = \"Filter: Damaged\"\n_G.hpScreenController.BUTTON_FILTER_BROKEN = \"Filter: Broken\"\n_G.hpScreenController.BUTTON_TAB_TABLE = \"Tab: Table\"\n_G.hpScreenController.BUTTON_TAB_TOP = \"Tab: Top\"\n_G.hpScreenController.BUTTON_TAB_SIDE = \"Tab: Side\"\n_G.hpScreenController.BUTTON_TAB_FRONT = \"Tab: Front\"\n_G.hpScreenController.BUTTON_SORT_ID = \"Table: Sort Id\"\n_G.hpScreenController.BUTTON_SORT_NAME = \"Table: Sort Name\"\n_G.hpScreenController.BUTTON_SORT_DMG = \"Table: Sort Dmg\"\n_G.hpScreenController.BUTTON_SORT_MAX = \"Table: Sort Max\"\n_G.hpScreenController.BUTTON_SORT_INT = \"Table: Sort Int\"\n_G.hpScreenController.BUTTON_SKIP_UP = \"Table: Skip Up\"\n_G.hpScreenController.BUTTON_SCROLL_UP = \"Table: Scroll Up\"\n_G.hpScreenController.BUTTON_SCROLL_DOWN = \"Table: Scroll Down\"\n_G.hpScreenController.BUTTON_SKIP_DOWN = \"Table: Skip Down\"\n_G.hpScreenController.BUTTON_TABLE_ROW = \"Table: Row \"\n_G.hpScreenController.BUTTON_STRETCH_CLOUD = \"Cloud: Stretch\"\n_G.hpScreenController.BUTTON_MAXIMIZE_CLOUD = \"Cloud: Maximize\"\n\n-- add SVG-specific fields\n_G.hpScreenController.SVG_TEMPLATE = [[<svg viewBox=\"0 0 1920 1080\" style=\"width:100%; height:100%\" class=\"bootstrap\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"none\">\n    <style>\n        text {\n            text-transform: none;\n            font-family: arial;\n            font-weight: normal;\n        }\n        .header text {\n            font-size:108px;\n            font-weight:bold;\n        }\n        .hidden, .hideInterface, #hiddenCloudButtonBar, #hiddenTableInterface {\n            display: none;\n        }\n        .broken {\n            fill: #ff1300 !important;\n            stop-color: #ff1300;\n        }\n        .damaged {\n            fill: #ffd700 !important;\n            stop-color: #ffd700;\n        }\n        .healthy, .titleColor {\n            fill: #00c322 !important;\n            stop-color: #00c322;\n        }\n        #sidebar, #tabs{\n            text-anchor: middle;\n        }\n        .majorLabel {\n            font-size: 80px;\n            fill: #777777;\n        }\n        .label {\n            font-size: 60px;\n            fill: #777777;\n        }\n        .majorValue {\n            font-size: 125px;\n            fill: #ffffff;\n        }\n        .minorValue {\n            font-size: 75px;\n            fill: #aaaaaa;\n        }\n        #filters use {\n            stroke: #777777;\n            stroke-width: 5px;\n        }\n        #filters text {\n            font-size: 75px;\n            fill: #777777;\n            stroke-width: 2px;\n            stroke: #000000;\n        }\n        #filters .selected use, #tabs .selected use {\n            stroke: #ffffff;\n        }\n        #filters .selected text, #filters text.selected, #tableInterface .selected text, #tabs .selected text {\n            fill: #ffffff;\n        }\n        #tabs text {\n            font-size: 60px;\n            fill: #777777;\n        }\n        #tabs use, #cloudButtonBar use {\n            stroke: #777777;\n            stroke-width: 5px;\n        }\n        #tabs rect {\n            stroke: #ffffff;\n            stroke-width: 5px;\n        }\n        .indicator {\n            stroke: #000000;\n            stroke-width: 3;\n        }\n        .units {\n            fill: #555555;\n        }\n        .mouseOver {\n            stroke: #5dd572 !important;\n            stroke-width: 10px;\n        }\n        #filters .mouseOver use {\n            stroke: #5dd572 !important;\n            stroke-width: 10px;\n        }\n        #tableInterface text {\n            font-size: 50px;\n            fill: #ffffff;\n        }\n        #tableInterface line {\n            stroke: #ffffff;\n            stroke-width: 5;\n        }\n        #tableInterface .tableHeader use {\n            fill: #777777;\n        }\n        #tableInterface .tableHeader use.selected {\n            fill: #ffffff;\n        }\n        #tableInterface .scrollbar use, #tableInterface .scrollbar line, rect.scrollbar {\n            stroke: #ffffff;\n            stroke-width: 5px;\n            fill: #777777;\n        }\n        #tableContents text {\n            font-size: 40px;\n            fill: #ffffff;\n        }\n        #tableContents g.selected text {\n            fill: #77ff00;\n        }\n        #tableContents g rect {\n            fill-opacity: 0.3;\n        }\n        #tableContents g text:nth-child(2) {\n            clip-path: url(#tableIdClip);\n            text-anchor: end;\n        }\n        #tableContents g text:nth-child(3) {\n            clip-path: url(#tableNameClip);\n        }\n        #tableContents g text:nth-child(4) {\n            clip-path: url(#tableDmgClip);\n            text-anchor: end;\n        }\n        #tableContents g text:nth-child(5) {\n            clip-path: url(#tableDmgClip);\n        }\n        #tableContents g text:nth-child(6) {\n            clip-path: url(#tableMaxClip);\n            text-anchor: end;\n        }\n        #tableContents g text:nth-child(7) {\n            clip-path: url(#tableMaxClip);\n        }\n        #tableContents g text:nth-child(8) {\n            clip-path: url(#tableIntClip);\n            text-anchor: end;\n        }\n    </style>\n    <defs>\n        <svg id=\"logo\"/>\n        <rect id=\"filterButton\" x=\"-182\" y=\"-44\" width=\"364\" height=\"88\" rx=\"20\" />\n        <path id=\"tabSweep\" d=\"m -130,7 c 50,0 20,-59 70,-59 l 120,0 c 50,0 20,59 70,59\" />\n        <path id=\"sortUp\" d=\"m -22,27 l 10,-10 10,10 z\" />\n        <path id=\"sortDown\" d=\"m -22,37 l 10,10 10,-10 z\" />\n        <clipPath id=\"tableIdClip\">\n            <rect y=\"-100\" width=\"100\" height=\"1180\" />\n        </clipPath>\n        <clipPath id=\"tableNameClip\">\n            <rect x=\"120\" y=\"-100\" width=\"561\" height=\"1180\" />\n        </clipPath>\n        <clipPath id=\"tableDmgClip\">\n            <rect x=\"701\" y=\"-100\" width=\"135\" height=\"1180\" />\n        </clipPath>\n        <clipPath id=\"tableMaxClip\">\n            <rect x=\"856\" y=\"-100\" width=\"130\" height=\"1180\" />\n        </clipPath>\n        <clipPath id=\"tableIntClip\">\n            <rect x=\"1006\" y=\"-100\" width=\"82\" height=\"1180\" />\n        </clipPath>\n        <path id=\"skipButton\" d=\"M -20,-15 l 40,0 M 0,-10 l 15,25 -30,0 z\" />\n        <path id=\"scrollButton\" d=\"M 0,-15 l 15,30 -30,0 z\" />\n        <path id=\"maximizeButton\" d=\"M 45,15 l 0,30 -30,0 m -30,0 l -30,0 0,-30 m 0,-30 l 0,-30 30,0 m 30,0 l 30,0 0,30 m 0,30 M 45,45 l -30,-30 m -30,-30 l -30,-30 m 90,0 l -30,30 m -30,30 l -30,30\" />\n        <path id=\"minimizeButton\" d=\"M 45,15 l -30,0 0,30 m -30,0 l 0,-30 -30,0 m 0,-30 l 30,0 0,-30 m 30,0 l 0,30 30,0 m 0,30 M 45,45 l -30,-30 m -30,-30 l -30,-30 m 90,0 l -30,30 m -30,30 l -30,30\" />\n        <path id=\"stretchButton\" d=\"M 0,40 l 0,-80 M 15,0 l 30,0 m -15,-15 l 15,15 -15,15 M -15,0 l -30,0 m 15,-15 l -15,15 15,15\" />\n        <path id=\"preserveButton\" d=\"M 0,40 l 0,-80 M -45,0 l 30,0 m -15,-15 l 15,15 -15,15 M 45,0 l -30,0 m 15,-15 l -15,15 15,15\" />\n        <linearGradient id=\"titleGradient\">\n            <stop offset=\"0%\" stop-color=\"#000000\" />\n            <stop offset=\"100%\" class=\"titleColor\" />\n        </linearGradient>\n    </defs>\n    <rect x=\"0\" y=\"0\" fill=\"#000000\" width=\"1920\" height=\"1080\" />\n    <g class=\"header\">\n        <rect x=\"0\" y=\"0\" fill=\"url('#titleGradient')\" width=\"1920\" height=\"108\" />\n        <use xlink:href=\"#logo\" x=\"4\" y=\"4\" width=\"178\" height=\"100\" />\n        <text x=\"1920\" y=\"108\" text-anchor=\"end\">%s</text>\n    </g>\n    <g id=\"sidebar\">\n        <text x=\"384\" y=\"216\" class=\"majorLabel\">Element Integrity</text>\n        <text x=\"384\" y=\"324\" text-anchor=\"middle\" class=\"majorValue\">%s <tspan class=\"units\">%</tspan></text>\n        <text x=\"370\" y=\"405\" text-anchor=\"end\" class=\"minorValue\">%.0f</text>\n        <text x=\"384\" y=\"405\" text-anchor=\"middle\" class=\"minorValue units\">/</text>\n        <text x=\"398\" y=\"405\" text-anchor=\"start\" class=\"minorValue\">%.0f</text>\n        <text x=\"10\" y=\"746\" text-anchor=\"start\" class=\"label\">Filter Visible</text>\n        <text x=\"758\" y=\"746\" text-anchor=\"end\" class=\"label\">Count</text>\n        <g id=\"filters\">\n            <g class=\"healthyFilterClass\">\n                <use xlink:href=\"#filterButton\" x=\"192\" y=\"810\" />\n                <text x=\"192\" y=\"833\">Healthy</text>\n            </g>\n            <text x=\"758\" y=\"833\" text-anchor=\"end\" class=\"healthyCountClass\">%d</text>\n            <g class=\"damagedFilterClass\">\n                <use xlink:href=\"#filterButton\" x=\"192\" y=\"918\" />\n                <text x=\"192\" y=\"941\">Damaged</text>\n            </g>\n            <text x=\"758\" y=\"941\" text-anchor=\"end\" class=\"damagedCountClass\">%d</text>\n            <g class=\"brokenFilterClass\">\n                <use xlink:href=\"#filterButton\" x=\"192\" y=\"1026\" />\n                <text x=\"192\" y=\"1049\">Broken</text>\n            </g>\n            <text x=\"758\" y=\"1049\" text-anchor=\"end\" class=\"brokenCountClass\">%d</text>\n        </g>\n    </g>\n    <g id=\"tabs\">\n        <g class=\"tableClass\">\n            <use xlink:href=\"#tabSweep\" x=\"960\" y=\"182\" />\n            <text x=\"960\" y=\"182\">Table</text>\n        </g>\n        <g class=\"topClass\">\n            <use xlink:href=\"#tabSweep\" x=\"1216\" y=\"182\" />\n            <text x=\"1216\" y=\"182\">Top</text>\n        </g>\n        <g class=\"sideClass\">\n            <use xlink:href=\"#tabSweep\" x=\"1472\" y=\"182\" />\n            <text x=\"1472\" y=\"182\">Side</text>\n        </g>\n        <g class=\"frontClass\">\n            <use xlink:href=\"#tabSweep\" x=\"1728\" y=\"182\" />\n            <text x=\"1728\" y=\"182\">Front</text>\n        </g>\n        <rect x=\"768\" y=\"189\" width=\"1152\" height=\"891\" />\n    </g>\n    <rect class=\"hideInterface\" x=\"0\" y=\"0\" fill=\"#000000\" width=\"1920\" height=\"1080\" />\n    <g transform=\"translate(768,189)\">\n        <g id=\"hiddenTableInterface\">\n            <g class=\"tableHeader\">\n                <g class=\"sortIdClass\">\n                    <use class=\"sortIdClassUp\" xlink:href=\"#sortUp\" x=\"30\" />\n                    <use class=\"sortIdClassDown\" xlink:href=\"#sortDown\" x=\"30\" />\n                    <text x=\"30\" y=\"50\">ID</text>\n                </g>\n                <g class=\"sortNameClass\">\n                    <use class=\"sortNameClassUp\" xlink:href=\"#sortUp\" x=\"150\" />\n                    <use class=\"sortNameClassDown\" xlink:href=\"#sortDown\" x=\"150\" />\n                    <text x=\"150\" y=\"50\">Name</text>\n                </g>\n                <g class=\"sortDmgClass\">\n                    <use class=\"sortDmgClassUp\" xlink:href=\"#sortUp\" x=\"731\" />\n                    <use class=\"sortDmgClassDown\" xlink:href=\"#sortDown\" x=\"731\" />\n                    <text x=\"731\" y=\"50\">Dmg</text>\n                </g>\n                <g class=\"sortMaxClass\">\n                    <use class=\"sortMaxClassUp\" xlink:href=\"#sortUp\" x=\"886\" />\n                    <use class=\"sortMaxClassDown\" xlink:href=\"#sortDown\" x=\"886\" />\n                    <text x=\"886\" y=\"50\">Max</text>\n                </g>\n                <g class=\"sortIntClass\">\n                    <use class=\"sortIntClassUp\" xlink:href=\"#sortUp\" x=\"1036\" />\n                    <use class=\"sortIntClassDown\" xlink:href=\"#sortDown\" x=\"1036\" />\n                    <text x=\"1036\" y=\"50\">%</text>\n                </g>\n                <line x1=\"0\" y1=\"65\" x2=\"1152\" y2=\"65\" />\n            </g>\n           <line x1=\"1098\" y1=\"65\" x2=\"1098\" y2=\"891\" />\n            <g class=\"scrollbar\">\n                <use xlink:href=\"#skipButton\" class=\"skipUpClass\" x=\"1125\" y=\"92\" />\n                <use xlink:href=\"#scrollButton\" class=\"scrollUpClass\" x=\"1125\" y=\"146\" />\n                <use xlink:href=\"#scrollButton\" transform=\"translate(1125,810) rotate(180)\" class=\"scrollDownClass\" />\n                <use xlink:href=\"#skipButton\" transform=\"translate(1125,864) rotate(180)\" class=\"skipDownClass\" />\n                <line x1=\"1125\" y1=\"173\" x2=\"1125\" y2=\"783\" />\n            </g>\n        </g>\n        <svg id=\"tabContents\"/>\n    </g>\n    <svg id=\"maximizedContents\"/>\n    <g id=\"hiddenCloudButtonBar\">\n        <use xlink:href=\"#maximizeButton\" class=\"maximizeClass\" x=\"1866\" y=\"1026\" />\n        <use xlink:href=\"#minimizeButton\" class=\"minimizeClass\" x=\"1866\" y=\"1026\" />\n        <use xlink:href=\"#stretchButton\" class=\"stretchClass\" x=\"1758\" y=\"1026\" />\n        <use xlink:href=\"#preserveButton\" class=\"preserveClass\" x=\"1758\" y=\"1026\" />\n    </g>\n</svg>]]\n_G.hpScreenController.SVG_LOGO = [[<svg id=\"logo\" viewBox=\"0 0 1920 1080\"></svg>]]\n\n-- one-time transforms\n_G.hpScreenController.SVG_TEMPLATE = string.gsub(_G.hpScreenController.SVG_TEMPLATE, '<svg id=\"logo\"/>',\n                                         _G.hpScreenController.SVG_LOGO)\n\n-- Define button ranges, either in tables of x1,y1,x2,y2 or lists of those tables.\nlocal buttonCoordinates = {}\nbuttonCoordinates[_G.hpScreenController.BUTTON_FILTER_HEALTHY] = {\n    x1 = 0, x2 = 0.2,\n    y1 = 0.7, y2 = 0.8,\n    class = ELEMENT_FILTER_HEALTHY_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_FILTER_DAMAGED] = {\n    x1 = 0, x2 = 0.2,\n    y1 = 0.8, y2 = 0.9,\n    class = ELEMENT_FILTER_DAMAGED_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_FILTER_BROKEN] = {\n    x1 = 0, x2 = 0.2,\n    y1 = 0.9, y2 = 1.0,\n    class = ELEMENT_FILTER_BROKEN_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_TAB_TABLE] = {\n    x1 = 0.433, x2 = 0.567,\n    y1 = 0.1, y2 = 0.169,\n    class = ELEMENT_TABLE_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_TAB_TOP] = {\n    x1 = 0.567, x2 = 0.7,\n    y1 = 0.1, y2 = 0.169,\n    class = ELEMENT_TOP_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_TAB_SIDE] = {\n    x1 = 0.7, x2 = 0.833,\n    y1 = 0.1, y2 = 0.169,\n    class = ELEMENT_SIDE_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_TAB_FRONT] = {\n    x1 = 0.833, x2 = 0.967,\n    y1 = 0.1, y2 = 0.169,\n    class = ELEMENT_FRONT_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SORT_ID] = {\n    x1 = 0.4, x2 = 0.457,\n    y1 = 0.175, y2 = 0.235,\n    class = ELEMENT_SORT_ID_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SORT_NAME] = {\n    x1 = 0.457, x2 = 0.76,\n    y1 = 0.175, y2 = 0.235,\n    class = ELEMENT_SORT_NAME_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SORT_DMG] = {\n    x1 = 0.76, x2 = 0.841,\n    y1 = 0.175, y2 = 0.235,\n    class = ELEMENT_SORT_DMG_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SORT_MAX] = {\n    x1 = 0.841, x2 = 0.919,\n    y1 = 0.175, y2 = 0.235,\n    class = ELEMENT_SORT_MAX_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SORT_INT] = {\n    x1 = 0.919, x2 = 0.972,\n    y1 = 0.175, y2 = 0.235,\n    class = ELEMENT_SORT_INT_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SKIP_UP] = {\n    x1 = 0.972, x2 = 1.0,\n    y1 = 0.235, y2 = 0.285,\n    class = ELEMENT_SKIP_UP_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SCROLL_UP] = {\n    x1 = 0.972, x2 = 1.0,\n    y1 = 0.285, y2 = 0.335,\n    class = ELEMENT_SCROLL_UP_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SCROLL_DOWN] = {\n    x1 = 0.972, x2 = 1.0,\n    y1 = 0.90, y2 = 0.95,\n    class = ELEMENT_SCROLL_DOWN_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_SKIP_DOWN] = {\n    x1 = 0.972, x2 = 1.0,\n    y1 = 0.95, y2 = 1.0,\n    class = ELEMENT_SKIP_DOWN_CLASS\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_STRETCH_CLOUD] = {\n    x1 = 0.8875, x2 = 0.94375,\n    y1 = 0.9, y2 = 1.0,\n    class = {ELEMENT_CLOUD_STRETCH, ELEMENT_CLOUD_PRESERVE}\n}\nbuttonCoordinates[_G.hpScreenController.BUTTON_MAXIMIZE_CLOUD] = {\n    x1 = 0.94375, x2 = 1.0,\n    y1 = 0.9, y2 = 1.0,\n    class = {ELEMENT_CLOUD_MAXIMIZE, ELEMENT_CLOUD_MINIMIZE}\n}\n\nfor row = 1, 20 do\n    buttonCoordinates[_G.hpScreenController.BUTTON_TABLE_ROW .. row] = {\n        x1 = 0.4, x2 = 0.972,\n        y1 = (189 + 65 - 5 + 41 * row - 30) / 1080, y2 = (189 + 65 + 41 * row + 11) / 1080,\n        class = ELEMENT_TABLE_ROW_CLASS .. row\n    }\nend\n\n-- save to controller for press/release event handling\n_G.hpScreenController.buttonCoordinates = buttonCoordinates\n\nfunction _G.hpScreenController:init(controller)\n    self.controller = controller\n    self.screen = controller.slots.screen\n    self.databank = controller.slots.databank\n\n    if not (self.databank and self.databank.hasKey(SHOW_HEALTHY_KEY) == 1) then\n        self.showHealthy = SHOW_HEALTHY_DEFAULT\n    end\n    if not (self.databank and self.databank.hasKey(SHOW_DAMAGED_KEY) == 1) then\n        self.showDamaged = SHOW_DAMAGED_DEFAULT\n    end\n    if not (self.databank and self.databank.hasKey(SHOW_BROKEN_KEY) == 1) then\n        self.showBroken = SHOW_BROKEN_DEFAULT\n    end\n\n    if not (self.databank and self.databank.hasKey(SELECTED_TAB_KEY) == 1) then\n        self:setSelectedTab(SELECTED_TAB_DEFAULT)\n    end\n\n    if not (self.databank and self.databank.hasKey(SORT_COLUMN_KEY) == 1) then\n        self.sortColumn = SORT_COLUMN_DEFAULT\n    end\n    if not (self.databank and self.databank.hasKey(SORT_UP_KEY) == 1) then\n        self.sortUp = SORT_UP_DEFAULT\n    end\n\n    if not (self.databank and self.databank.hasKey(SCROLL_INDEX_KEY) == 1) then\n        self.scrollIndex = SCROLL_INDEX_DEFAULT\n    end\n\n    if not (self.databank and self.databank.hasKey(STRECH_CLOUD_KEY) == 1) then\n        self.stretchCloud = STRETCH_CLOUD_DEFAULT\n    end\n    if not (self.databank and self.databank.hasKey(MAXIMIZE_CLOUD_KEY) == 1) then\n        self.maximizeCloud = MAXIMIZE_CLOUD_DEFAULT\n    end\n\n    if _G.hpOutline then\n        self.outlineTop = _G.hpOutline.SVG_TOP\n        self.outlineSide = _G.hpOutline.SVG_SIDE\n        self.outlineFront = _G.hpOutline.SVG_FRONT\n    end\nend\n\n--- Handle a mouse down event at the provided coordinates.\nfunction _G.hpScreenController:mouseDown(x, y)\n    self.mouse.x = x\n    self.mouse.y = y\n    self.mouse.pressed = _G.ScreenUtils.detectButton(self.buttonCoordinates, x, y)\nend\n\n--- Handle a mouse up event at the provided coordinates.\nfunction _G.hpScreenController:mouseUp(x, y)\n    local released = _G.ScreenUtils.detectButton(self.buttonCoordinates, x, y)\n    if released and self.mouse.pressed == released then\n        local modified = self:handleButton(released)\n        self.needRefresh = self.needRefresh or modified\n    end\n    self.mouse.pressed = nil\nend\n\nfunction _G.hpScreenController:setSelectedTab(tabIndex)\n    if tabIndex == self.selectedTab then\n        return false\n    end\n\n    self.selectedTab = tabIndex\n    if self.databank then\n        self.databank.setIntValue(SELECTED_TAB_KEY, tabIndex)\n    end\n    self.tabData = {}\n    self.tabInitialized = false\n\n    if tabIndex == 1 then -- Table\n\n    elseif tabIndex == 2 then -- Top\n        local screenXFunc = function(pos)\n            return pos.x\n        end\n        local screenYFunc = function(pos)\n            return -pos.y\n        end\n        local screenZFunc = function(pos)\n            return pos.z\n        end\n        local template, points = self:buildShipCloudPoints(self.outlineTop, screenXFunc, screenYFunc, screenZFunc)\n        self.tabData.template = template\n        self.tabData.points = points\n\n        self.tabInitialized = true\n    elseif tabIndex == 3 then -- Side\n        local screenXFunc = function(pos)\n            return pos.y\n        end\n        local screenYFunc = function(pos)\n            return -pos.z\n        end\n        local screenZFunc = function(pos)\n            return pos.x\n        end\n        local template, points = self:buildShipCloudPoints(self.outlineSide, screenXFunc, screenYFunc, screenZFunc)\n        self.tabData.template = template\n        self.tabData.points = points\n\n        self.tabInitialized = true\n    elseif tabIndex == 4 then -- Front\n        local screenXFunc = function(pos)\n            return pos.x\n        end\n        local screenYFunc = function(pos)\n            return -pos.z\n        end\n        local screenZFunc = function(pos)\n            return pos.y\n        end\n        local template, points = self:buildShipCloudPoints(self.outlineFront, screenXFunc, screenYFunc, screenZFunc)\n        self.tabData.template = template\n        self.tabData.points = points\n\n        self.tabInitialized = true\n    end\n\n    return true\nend\n\n--- Render the interface to the screen.\nfunction _G.hpScreenController:refresh()\n    if not self.screen then\n        return\n    end\n\n    -- update mouse position for tracking drags\n    self.mouse.x = self.screen.getMouseX()\n    self.mouse.y = self.screen.getMouseY()\n    self.mouse.state = self.screen.getMouseState() == 1\n    -- if mouse has left screen remove pressed flag\n    if self.mouse.x < 0 then\n        self.mouse.pressed = nil\n    end\n\n    local mouseOver = _G.ScreenUtils.detectButton(self.buttonCoordinates, self.mouse.x, self.mouse.y)\n\n    -- refresh conditions: needRefresh, mouse-over state changed\n    if not (self.needRefresh or self.mouse.over ~= mouseOver) then\n        return\n    end\n    self.needRefresh = false\n    -- self.mouse.over = mouseOver\n\n    if self.databank then\n        if self.databank.hasKey(SHOW_HEALTHY_KEY) == 1 then\n            self.showHealthy = self.databank.getIntValue(SHOW_HEALTHY_KEY) == 1\n        end\n        if self.databank.hasKey(SHOW_DAMAGED_KEY) == 1 then\n            self.showDamaged = self.databank.getIntValue(SHOW_DAMAGED_KEY) == 1\n        end\n        if self.databank.hasKey(SHOW_BROKEN_KEY) == 1 then\n            self.showBroken = self.databank.getIntValue(SHOW_BROKEN_KEY) == 1\n        end\n\n        if self.databank.getIntValue(SELECTED_TAB_KEY) ~= self.selectedTab then\n            self:setSelectedTab(self.databank.getIntValue(SELECTED_TAB_KEY))\n        end\n\n        if self.databank.hasKey(SORT_COLUMN_KEY) == 1 then\n            self.sortColumn = self.databank.getIntValue(SORT_COLUMN_KEY)\n        end\n        if self.databank.hasKey(SORT_UP_KEY) == 1 then\n            self.sortUp = self.databank.getIntValue(SORT_UP_KEY) == 1\n        end\n        if self.databank.hasKey(SCROLL_INDEX_KEY) == 1 then\n            self.scrollIndex = self.databank.getIntValue(SCROLL_INDEX_KEY)\n        end\n\n        if self.databank.hasKey(STRECH_CLOUD_KEY) == 1 then\n            self.stretchCloud = self.databank.getIntValue(STRECH_CLOUD_KEY) == 1\n        end\n        if self.databank.hasKey(MAXIMIZE_CLOUD_KEY) == 1 then\n            self.maximizeCloud = self.databank.getIntValue(MAXIMIZE_CLOUD_KEY) == 1\n        end\n\n        -- will call more than desired, but will keep state up to date\n        self:updateButtonStates()\n    end\n\n    local html = self.SVG_TEMPLATE\n\n    -- extract values to show in svg\n    local elementData = self.controller.elementData\n    local elementMetadata = self.controller.elementMetadata\n\n    local shipName = self.controller.shipName\n    local elementIntegrity = math.floor(elementMetadata.totalHp / elementMetadata.totalMaxHp * 100)\n    local currentHp = elementMetadata.totalHp\n    local maxHp = elementMetadata.totalMaxHp\n    local healthyElements = 0\n    local damagedElements = 0\n    local brokenElements = 0\n    for _, element in pairs(self.controller.elementData) do\n        if element.h == element.m then\n            healthyElements = healthyElements + 1\n        elseif element.h > 0 then\n            damagedElements = damagedElements + 1\n        else\n            brokenElements = brokenElements + 1\n        end\n    end\n\n    -- insert values to svg\n    html = _G.Utilities.sanitizeFormatString(html)\n    html = string.format(html, shipName, elementIntegrity, currentHp, maxHp, healthyElements, damagedElements,\n               brokenElements)\n\n    if brokenElements > 0 then\n        html = _G.ScreenUtils.replaceClass(html, ELEMENT_TITLE_COLOR_CLASS, BROKEN_CLASS)\n    elseif damagedElements > 0 then\n        html = _G.ScreenUtils.replaceClass(html, ELEMENT_TITLE_COLOR_CLASS, DAMAGED_CLASS)\n    else\n        html = _G.ScreenUtils.replaceClass(html, ELEMENT_TITLE_COLOR_CLASS, HEALTHY_CLASS)\n    end\n\n    if brokenElements > 0 then\n        html = _G.ScreenUtils.addClass(html, ELEMENT_FILTER_BROKEN_CLASS, BROKEN_CLASS)\n    end\n    if damagedElements > 0 then\n        html = _G.ScreenUtils.addClass(html, ELEMENT_FILTER_DAMAGED_CLASS, DAMAGED_CLASS)\n    end\n    if healthyElements > 0 then\n        html = _G.ScreenUtils.addClass(html, ELEMENT_FILTER_HEALTHY_CLASS, HEALTHY_CLASS)\n    end\n\n    if self.showHealthy then\n        html = _G.ScreenUtils.addClass(html, ELEMENT_FILTER_HEALTHY_CLASS, SELECTED_CLASS)\n        html = _G.ScreenUtils.addClass(html, ELEMENT_COUNT_HEALTHY_CLASS, SELECTED_CLASS)\n    end\n    if self.showDamaged then\n        html = _G.ScreenUtils.addClass(html, ELEMENT_FILTER_DAMAGED_CLASS, SELECTED_CLASS)\n        html = _G.ScreenUtils.addClass(html, ELEMENT_COUNT_DAMAGED_CLASS, SELECTED_CLASS)\n    end\n    if self.showBroken then\n        html = _G.ScreenUtils.addClass(html, ELEMENT_FILTER_BROKEN_CLASS, SELECTED_CLASS)\n        html = _G.ScreenUtils.addClass(html, ELEMENT_COUNT_BROKEN_CLASS, SELECTED_CLASS)\n    end\n\n    -- if initializing tab in background say so?\n\n    -- replacing class on tab intentionally prevents mousing over it from working\n    local tabContents = TAB_CONTENTS_TAG\n    if self.selectedTab == 1 then\n        html = _G.ScreenUtils.replaceClass(html, ELEMENT_TABLE_CLASS, SELECTED_CLASS)\n\n        -- enable table header\n        html = _G.ScreenUtils.replaceClass(html, ELEMENT_HIDDEN_TABLE_INTERFACE, ELEMENT_TABLE_INTERFACE)\n\n        tabContents, self.maxScrollIndex = self:buildTable()\n\n        -- manage header states\n        local columnElementClass = nil\n        if self.sortColumn == 1 then\n            columnElementClass = ELEMENT_SORT_ID_CLASS\n        elseif self.sortColumn == 2 then\n            columnElementClass = ELEMENT_SORT_NAME_CLASS\n        elseif self.sortColumn == 3 then\n            columnElementClass = ELEMENT_SORT_DMG_CLASS\n        elseif self.sortColumn == 4 then\n            columnElementClass = ELEMENT_SORT_MAX_CLASS\n        elseif self.sortColumn == 5 then\n            columnElementClass = ELEMENT_SORT_INT_CLASS\n        end\n        if columnElementClass then\n            html = _G.ScreenUtils.addClass(html, columnElementClass, SELECTED_CLASS)\n            if self.sortUp then\n                html = _G.ScreenUtils.addClass(html, columnElementClass .. \"Up\", SELECTED_CLASS)\n            else\n                html = _G.ScreenUtils.addClass(html, columnElementClass .. \"Down\", SELECTED_CLASS)\n            end\n        end\n    elseif self.selectedTab == 2 or self.selectedTab == 3 or self.selectedTab == 4 then\n        tabContents = updateCloud(self.tabData.template, self.tabData.points, self.controller.elementData,\n                          self.controller.selectedElement, self.showHealthy, self.showDamaged, self.showBroken)\n\n        -- enable cloud button bar\n        html = _G.ScreenUtils.replaceClass(html, ELEMENT_HIDDEN_CLOUD_BUTTONS, ELEMENT_CLOUD_BUTTONS)\n\n        if self.selectedTab == 2 then\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_TOP_CLASS, SELECTED_CLASS)\n        elseif self.selectedTab == 3 then\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_SIDE_CLASS, SELECTED_CLASS)\n            tabContents = updateCloud(self.tabData.template, self.tabData.points, self.controller.elementData,\n                              self.controller.selectedElement, self.showHealthy, self.showDamaged, self.showBroken)\n        elseif self.selectedTab == 4 then\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_FRONT_CLASS, SELECTED_CLASS)\n            tabContents = updateCloud(self.tabData.template, self.tabData.points, self.controller.elementData,\n                              self.controller.selectedElement, self.showHealthy, self.showDamaged, self.showBroken)\n        end\n\n        -- manage button states\n        if self.stretchCloud then\n            tabContents = string.gsub(tabContents, \"(<svg.-)>\", [[%1 preserveAspectRatio=\"none\">]])\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_CLOUD_STRETCH, HIDDEN_CLASS)\n        else\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_CLOUD_PRESERVE, HIDDEN_CLASS)\n        end\n\n        if self.maximizeCloud then\n            tabContents = string.gsub(tabContents, \"(<svg.-)>\",\n                              string.format([[%%1 width=\"%f\" height=\"%f\">]], 1920, 1080))\n            html = string.gsub(html, MAXIMIZED_CONTENTS_TAG, tabContents)\n            tabContents = \"\"\n\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_CLOUD_MAXIMIZE, HIDDEN_CLASS)\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_HIDE_INTERFACE, \"\")\n        else\n            tabContents = string.gsub(tabContents, \"(<svg.-)>\", string.format([[%%1 width=\"%f\" height=\"%f\">]],\n                              TAB_CONTENTS_WIDTH, TAB_CONTENTS_HEIGHT))\n\n            html = _G.ScreenUtils.replaceClass(html, ELEMENT_CLOUD_MINIMIZE, HIDDEN_CLASS)\n        end\n\n    end\n    html = string.gsub(html, TAB_CONTENTS_TAG, tabContents)\n\n    -- add mouse-over highlights\n    if not self.mouse.pressed then\n        html = _G.ScreenUtils.mouseoverButtons(self.buttonCoordinates, self.mouse.x, self.mouse.y, html,\n                   MOUSE_OVER_CLASS)\n    end\n\n    self.screen.setHTML(html)\nend\n\n--- Processes the input indicated by the provided button id.\n-- @treturn boolean True if the state was changed by this action.\nfunction _G.hpScreenController:handleButton(buttonId)\n    local modified = false\n    local storeSort = false\n    local storeScroll = false\n\n    local tableRow = string.match(buttonId, self.BUTTON_TABLE_ROW .. \"(%d+)\")\n\n    if buttonId == _G.hpScreenController.BUTTON_FILTER_HEALTHY then\n        self.showHealthy = not self.showHealthy\n        if self.databank then\n            if self.showHealthy then\n                self.databank.setIntValue(SHOW_HEALTHY_KEY, 1)\n            else\n                self.databank.setIntValue(SHOW_HEALTHY_KEY, 0)\n            end\n        end\n\n        self.scrollIndex = 1\n        storeScroll = true\n\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_FILTER_DAMAGED then\n        self.showDamaged = not self.showDamaged\n        if self.databank then\n            if self.showDamaged then\n                self.databank.setIntValue(SHOW_DAMAGED_KEY, 1)\n            else\n                self.databank.setIntValue(SHOW_DAMAGED_KEY, 0)\n            end\n        end\n\n        self.scrollIndex = 1\n        storeScroll = true\n\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_FILTER_BROKEN then\n        self.showBroken = not self.showBroken\n        if self.databank then\n            if self.showBroken then\n                self.databank.setIntValue(SHOW_BROKEN_KEY, 1)\n            else\n                self.databank.setIntValue(SHOW_BROKEN_KEY, 0)\n            end\n        end\n\n        self.scrollIndex = 1\n        storeScroll = true\n\n        modified = true\n\n    elseif buttonId == _G.hpScreenController.BUTTON_TAB_TABLE then\n        modified = self:setSelectedTab(1)\n    elseif buttonId == _G.hpScreenController.BUTTON_TAB_TOP then\n        modified = self:setSelectedTab(2)\n    elseif buttonId == _G.hpScreenController.BUTTON_TAB_SIDE then\n        modified = self:setSelectedTab(3)\n    elseif buttonId == _G.hpScreenController.BUTTON_TAB_FRONT then\n        modified = self:setSelectedTab(4)\n\n    elseif buttonId == _G.hpScreenController.BUTTON_SORT_ID then\n        if self.sortColumn == 1 then\n            self.sortUp = not self.sortUp\n        else\n            self.sortColumn = 1\n            self.sortUp = SORT_UP_DEFAULT\n        end\n\n        storeSort = true\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_SORT_NAME then\n        if self.sortColumn == 2 then\n            self.sortUp = not self.sortUp\n        else\n            self.sortColumn = 2\n            self.sortUp = SORT_UP_DEFAULT\n        end\n\n        storeSort = true\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_SORT_DMG then\n        if self.sortColumn == 3 then\n            self.sortUp = not self.sortUp\n        else\n            self.sortColumn = 3\n            self.sortUp = SORT_UP_DEFAULT\n        end\n\n        storeSort = true\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_SORT_MAX then\n        if self.sortColumn == 4 then\n            self.sortUp = not self.sortUp\n        else\n            self.sortColumn = 4\n            self.sortUp = SORT_UP_DEFAULT\n        end\n\n        storeSort = true\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_SORT_INT then\n        if self.sortColumn == 5 then\n            self.sortUp = not self.sortUp\n        else\n            self.sortColumn = 5\n            self.sortUp = SORT_UP_DEFAULT\n        end\n\n        storeSort = true\n        modified = true\n\n    elseif buttonId == _G.hpScreenController.BUTTON_SKIP_UP then\n        if self.scrollIndex > 1 then\n            self.scrollIndex = 1\n            storeScroll = true\n            modified = true\n        end\n    elseif buttonId == _G.hpScreenController.BUTTON_SKIP_DOWN then\n        if self.scrollIndex < self.maxScrollIndex then\n            self.scrollIndex = self.maxScrollIndex\n            storeScroll = true\n            modified = true\n        end\n    elseif buttonId == _G.hpScreenController.BUTTON_SCROLL_UP then\n        if self.scrollIndex > 1 then\n            self.scrollIndex = self.scrollIndex - 1\n            storeScroll = true\n            modified = true\n        end\n    elseif buttonId == _G.hpScreenController.BUTTON_SCROLL_DOWN then\n        if self.scrollIndex < self.maxScrollIndex then\n            self.scrollIndex = self.scrollIndex + 1\n            storeScroll = true\n            modified = true\n        end\n\n    elseif tableRow then\n        local index = self.scrollIndex + tonumber(tableRow) - 1 -- both are 1-indexed\n        local sortedIds = self:sortIdsForTable()\n\n        if sortedIds[index] then\n            if sortedIds[index] == self.controller.selectedElement then\n                self.controller:select(nil)\n            else\n                self.controller:select(sortedIds[index])\n            end\n            modified = true\n        end\n\n    elseif buttonId == _G.hpScreenController.BUTTON_STRETCH_CLOUD then\n        self.stretchCloud = not self.stretchCloud\n        if self.databank then\n            if self.stretchCloud then\n                self.databank.setIntValue(STRECH_CLOUD_KEY, 1)\n            else\n                self.databank.setIntValue(STRECH_CLOUD_KEY, 0)\n            end\n        end\n        modified = true\n    elseif buttonId == _G.hpScreenController.BUTTON_MAXIMIZE_CLOUD then\n        self.maximizeCloud = not self.maximizeCloud\n        if self.databank then\n            if self.maximizeCloud then\n                self.databank.setIntValue(MAXIMIZE_CLOUD_KEY, 1)\n            else\n                self.databank.setIntValue(MAXIMIZE_CLOUD_KEY, 0)\n            end\n        end\n        modified = true\n    end\n\n    if storeSort and self.databank then\n        self.databank.setIntValue(SORT_COLUMN_KEY, self.sortColumn)\n        if self.sortUp then\n            self.databank.setIntValue(SORT_UP_KEY, 1)\n        else\n            self.databank.setIntValue(SORT_UP_KEY, 0)\n        end\n    end\n\n    if storeScroll and self.databank then\n        self.databank.setIntValue(SCROLL_INDEX_KEY, self.scrollIndex)\n    end\n\n    if modified then\n        -- misses case where another player interacts with same panel\n        self:updateButtonStates()\n    end\n\n    return modified\nend\n\n-- Update the active state of buttons based on if they're visible.\nfunction _G.hpScreenController:updateButtonStates()\n    local isTable = self.selectedTab == 1\n    local isMaximized = self.maximizeCloud\n\n    -- global elements, only depend on not being maximized\n    self.buttonCoordinates[self.BUTTON_FILTER_HEALTHY].active = not isMaximized\n    self.buttonCoordinates[self.BUTTON_FILTER_DAMAGED].active = not isMaximized\n    self.buttonCoordinates[self.BUTTON_FILTER_BROKEN].active = not isMaximized\n    self.buttonCoordinates[self.BUTTON_TAB_TABLE].active = not isMaximized\n    self.buttonCoordinates[self.BUTTON_TAB_TOP].active = not isMaximized\n    self.buttonCoordinates[self.BUTTON_TAB_SIDE].active = not isMaximized\n    self.buttonCoordinates[self.BUTTON_TAB_FRONT].active = not isMaximized\n\n    -- table elements, only depend on table being set\n    self.buttonCoordinates[self.BUTTON_SORT_ID].active = isTable\n    self.buttonCoordinates[self.BUTTON_SORT_NAME].active = isTable\n    self.buttonCoordinates[self.BUTTON_SORT_DMG].active = isTable\n    self.buttonCoordinates[self.BUTTON_SORT_MAX].active = isTable\n    self.buttonCoordinates[self.BUTTON_SORT_INT].active = isTable\n    self.buttonCoordinates[self.BUTTON_SKIP_UP].active = isTable\n    self.buttonCoordinates[self.BUTTON_SCROLL_UP].active = isTable\n    self.buttonCoordinates[self.BUTTON_SCROLL_DOWN].active = isTable\n    self.buttonCoordinates[self.BUTTON_SKIP_DOWN].active = isTable\n    for row = 1, 20 do\n        buttonCoordinates[self.BUTTON_TABLE_ROW .. row].active = isTable\n    end\n\n    -- cloud elements, only depend on not table\n    self.buttonCoordinates[self.BUTTON_STRETCH_CLOUD].active = not isTable\n    self.buttonCoordinates[self.BUTTON_MAXIMIZE_CLOUD].active = not isTable\nend\n\nfunction _G.hpScreenController:sortIdsForTable()\n    local elementData = self.controller.elementData\n    local sortColumn = self.sortColumn\n\n    local sortFunction\n    if self.sortColumn == 1 then -- id\n        sortFunction = function(e)\n            return 1 -- fallback to id sort\n        end\n    elseif self.sortColumn == 2 then -- name\n        sortFunction = function(e)\n            return e.n\n        end\n    elseif sortColumn == 3 then -- damage\n        sortFunction = function(e)\n            return e.m - e.h\n        end\n    elseif sortColumn == 4 then -- max\n        sortFunction = function(e)\n            return e.m\n        end\n    elseif sortColumn == 5 then -- integrity\n        sortFunction = function(e)\n            return e.h / e.m\n        end\n    end\n    local sorted = sortIds(elementData, sortFunction, not self.sortUp)\n\n    local filter = function(id)\n        local hp = elementData[id].h\n        local max = elementData[id].m\n        return (self.showBroken and hp == 0) or (self.showDamaged and hp > 0 and hp < max) or (self.showHealthy and hp == max)\n    end\n    return filterIds(sorted, filter)\nend\n\nlocal TABLE_ROW_BASE_OFFSET = 65 -- height of heading\nlocal TABLE_SCROLL_BUTTON_SIZE = 54\nlocal TABLE_SCROLL_BAR_OFFSET = TABLE_ROW_BASE_OFFSET + TABLE_SCROLL_BUTTON_SIZE * 2\nlocal TABLE_SCROLL_BAR_HEIGHT = TAB_CONTENTS_HEIGHT - TABLE_SCROLL_BAR_OFFSET - TABLE_SCROLL_BUTTON_SIZE * 2\n-- Use nth-child css selector on .tableRow to style row elements\nlocal TABLE_ROW_TEMPLATE = [[\n<g class=\"tableRow%d%s\" transform=\"translate(0,%.0f)\">]]..[[\n<rect x=\"2.5\" y=\"-30\" width=\"]] .. TAB_CONTENTS_WIDTH - TABLE_SCROLL_BUTTON_SIZE - 5 .. [[\" height=\"39\"/>]] .. [[\n<text x=\"100\">%d</text>]] .. [[\n<text x=\"120\">%s</text>]] .. [[\n<text x=\"796\">%s</text>]] .. [[\n<text x=\"796\">%s</text>]] .. [[\n<text x=\"946\">%s</text>]] .. [[\n<text x=\"946\">%s</text>]] .. [[\n<text x=\"1081\">%d</text>]] .. [[\n</g>]]\n--- Generates the contents of the table.\nfunction _G.hpScreenController:buildTable()\n    local elementData = self.controller.elementData\n    local scrollIndex = self.scrollIndex\n    local selectedId = self.controller.selectedElement\n    local table = [[<g id=\"tableContents\">]]\n\n    local sortedIds = self:sortIdsForTable()\n\n    local rowCount = 0\n    local visibleCount = 0\n    local data, hp, max, class, yOffset, hpPrint, hpUnit, maxPrint, maxUnit, integrity\n    for _, id in pairs(sortedIds) do\n        data = elementData[id]\n        hp = data.h\n        max = data.m\n\n        rowCount = rowCount + 1\n\n        yOffset = TABLE_ROW_BASE_OFFSET - 5 + 41 * (visibleCount + 1)\n        if rowCount >= scrollIndex and yOffset < TAB_CONTENTS_HEIGHT then\n            visibleCount = visibleCount + 1\n\n            if id == selectedId then\n                class = \" selected\"\n            else\n                class = \"\"\n            end\n\n            hpPrint, hpUnit = Utilities.printableNumber(math.floor(max - hp + 0.5), \"\")\n            if hpPrint == \"0.0\" then\n                hpPrint = \"0\"\n            end\n            maxPrint, maxUnit = Utilities.printableNumber(max, \"\")\n            integrity = math.floor(100 * hp / max)\n\n            if integrity == 0 then\n                class = class .. \" broken\"\n            elseif integrity < 100 then\n                class = class .. \" damaged\"\n            end\n\n            table = table .. string.format(TABLE_ROW_TEMPLATE, visibleCount, class, yOffset, id, data.n, hpPrint, hpUnit, maxPrint, maxUnit, integrity)\n\n        end\n    end\n    table = table .. [[</g>]]\n\n    local scrollBarHeight = TABLE_SCROLL_BAR_HEIGHT * visibleCount / rowCount\n    local scrollBarOffset = TABLE_SCROLL_BAR_HEIGHT * (scrollIndex - 1) / rowCount\n\n    table = table .. string.format([[<rect class=\"scrollbar\" x=\"%.0f\" y=\"%.0f\" width=\"%.0f\" height=\"%.0f\" />]], TAB_CONTENTS_WIDTH - TABLE_SCROLL_BUTTON_SIZE, TABLE_SCROLL_BAR_OFFSET + scrollBarOffset, TABLE_SCROLL_BUTTON_SIZE, scrollBarHeight)\n\n    local maxScrollIndex = rowCount - visibleCount + 1\n    return table, maxScrollIndex\nend\n\nlocal CLOUD_REPLACE_TARGET = [[<g id=\"pointCloud\"%s*/>]]\nlocal DEFAULT_OUTLINE = [[\n<svg viewBox=\"%f %f %f %f\" scaleMultiplier=\"%d\">\n    <style>\n    circle {\n        stroke: black;\n        stroke-width: %.2f;\n    }\n    .selected {\n        stroke: white;\n    }\n    </style>\n    <g>\n        <g id=\"pointCloud\" />\n    </g>\n</svg>\n]]\nlocal HEALTH_GROUP_TEMPLATE = [[<g class=\"%s\">%s</g>]]\n-- TODO make coroutine\nlocal CLOUD_ELEMENT_TEMPLATE = [[<circle cx=\"%.2f\" cy=\"%.2f\" r=\"%.2f\"/>]]\nfunction _G.hpScreenController:buildShipCloudPoints(outline, screenXFunc, screenYFunc, screenZFunc)\n    local elementData = self.controller.elementData\n    local elementMetadata = self.controller.elementMetadata\n\n    if not outline then\n        local scale = 100\n        local buffer = 0.05 -- 5% extra per side\n        local metaX1 = screenXFunc(elementMetadata.min)\n        local metaX2 = screenXFunc(elementMetadata.max)\n        local metaMinX = math.min(metaX1, metaX2)\n        local metaMaxX = math.max(metaX1, metaX2)\n        local metaY1 = screenYFunc(elementMetadata.min)\n        local metaY2 = screenYFunc(elementMetadata.max)\n        local metaMinY = math.min(metaY1, metaY2)\n        local metaMaxY = math.max(metaY1, metaY2)\n        local minX = (metaMinX - (metaMaxX - metaMinX) * buffer) * scale\n        local minY = (metaMinY - (metaMaxY - metaMinY) * buffer) * scale\n        local maxX = (metaMaxX + (metaMaxX - metaMinX) * buffer) * scale\n        local maxY = (metaMaxY + (metaMaxY - metaMinY) * buffer) * scale\n        local width = maxX - minX\n        local height = maxY - minY\n        local strokeWidth = math.min(width, height) / 200\n        outline = string.format(DEFAULT_OUTLINE, minX, minY, width, height, scale, strokeWidth)\n    end\n\n    local minX, minY, width, height = string.match(outline,\n                                          'viewBox%s*=%s*\"([%d.-]+)%s+([%d.-]+)%s+([%d.-]+)%s+([%d.-]+)\"')\n    local scaleMultiplier = string.match(outline, 'scaleMultiplier=\"([0-9.]+)\"')\n    scaleMultiplier = scaleMultiplier or 100\n    local maxX = minX + width\n    local maxY = minY + height\n\n    local maxDimension = math.max(maxX - minX, maxY - minY)\n    local minElementSize = maxDimension / 50\n    local maxElementSize = maxDimension / 25\n\n    local minHp2 = elementMetadata.min.hp * elementMetadata.min.hp\n    local maxHp2 = elementMetadata.max.hp * elementMetadata.max.hp\n\n    -- TODO should change for each perspective, not be staticly set to the z axis\n    local sortedIds = sortIds(elementData, screenZFunc)\n\n    local elementList = {}\n    local element, hp2, radius\n    for _, id in pairs(sortedIds) do\n        element = elementData[id]\n        hp2 = element.h * element.h\n        radius = (hp2 - minHp2) / (maxHp2 - minHp2) * (maxElementSize - minElementSize) + minElementSize\n\n        elementList[id] = string.format(CLOUD_ELEMENT_TEMPLATE, screenXFunc(element.p) * scaleMultiplier,\n                              screenYFunc(element.p) * scaleMultiplier, radius)\n    end\n    return outline, elementList\nend\n\n--- Helper function for updateCloud to add a point to the appropriate list.\nlocal function addPoint(point, hp, maxHp, broken, damaged, healthy)\n    if hp == 0 then\n        broken[#broken + 1] = point\n    elseif hp < maxHp then\n        damaged[#damaged + 1] = point\n    else\n        healthy[#healthy + 1] = point\n    end\nend\n\nfunction _G.updateCloud(outline, points, elementData, selectedId, showHealthy, showDamaged, showBroken)\n    -- if not initialized\n    if not outline or not points then\n        return \"\"\n    end\n\n    local broken = {}\n    local damaged = {}\n    local healthy = {}\n\n    local hp, maxHp\n    for id, point in pairs(points) do\n        hp = elementData[id].h\n        maxHp = elementData[id].m\n        addPoint(point, hp, maxHp, broken, damaged, healthy)\n    end\n\n    -- add selected point to end of type - places on top of similarly (un)damaged elements\n    if points[selectedId] then\n        local point = string.gsub(points[selectedId], \"/>\", [[ class=\"selected\"/>]])\n        hp = elementData[selectedId].h\n        maxHp = elementData[selectedId].m\n        addPoint(point, hp, maxHp, broken, damaged, healthy)\n    end\n\n    local brokenGroup = \"\"\n    if showBroken then\n        brokenGroup = string.format(HEALTH_GROUP_TEMPLATE, BROKEN_CLASS, table.concat(broken, \"\"))\n    end\n    local damagedGroup = \"\"\n    if showDamaged then\n        damagedGroup = string.format(HEALTH_GROUP_TEMPLATE, DAMAGED_CLASS, table.concat(damaged, \"\"))\n    end\n    local healthyGroup = \"\"\n    if showHealthy then\n        healthyGroup = string.format(HEALTH_GROUP_TEMPLATE, HEALTHY_CLASS, table.concat(healthy, \"\"))\n    end\n\n    return string.gsub(outline, CLOUD_REPLACE_TARGET, healthyGroup .. damagedGroup .. brokenGroup)\nend\n\nfunction filterIds(ids, filter)\n    local filtered = {}\n    for _, id in pairs(ids) do\n        if filter(id) then\n            table.insert(filtered, id)\n        end\n    end\n    return filtered\nend\n\nfunction sortIds(elementData, valueAccessor, reverse)\n    local ids = {}\n    for k, _ in pairs(elementData) do\n        ids[#ids + 1] = k\n    end\n\n    local comparator = function(a, b)\n        local ea = elementData[a]\n        local eb = elementData[b]\n\n        -- else sort by axis\n        local valueA = valueAccessor(ea)\n        local valueB = valueAccessor(eb)\n        if valueA == valueB then\n            -- fall back to index\n            return (not reverse and a < b) or (reverse and a > b)\n        end\n        -- higher value comes later in list\n        return (not reverse and valueA < valueB) or (reverse and valueA > valueB)\n    end\n    table.sort(ids, comparator)\n    return ids\nend\n","filter":{"args":[],"signature":"start()","slotKey":"0"},"key":"4"},
        {"code":"_G.hpScreenController:refresh()","filter":{"args":[],"signature":"update()","slotKey":"-2"},"key":"5"},
        {"code":"_G.hpScreenController:mouseDown(x, y)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"0"},"key":"6"},
        {"code":"_G.hpScreenController:mouseUp(x, y)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"0"},"key":"7"},
        {"code":"--- Utilities module.\n-- Frequently needed utility functions.\n-- @module Utilities\n\n-- Guard to keep this module from reinitializing any time the start event fires if placed in libraries/system slot.\nif _G.Utilities then\n    return\nend\n_G.Utilities = {}\n\nlocal SI_PREFIXES = {\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"}\n--- Converts raw float to formatted SI prefix with limited decimal places.\n-- @tparam number value The number to format.\n-- @tparam string units The units label to apply SI prefixes to.\n-- @treturn string The formated number for display.\n-- @treturn string The units with SI prefix applied.\nfunction _G.Utilities.printableNumber(value, units)\n    -- can't process nil, 0 breaks the sign calculation\n    if not value or value == 0 then\n        return \"0.0\", units\n    end\n\n    local adjustedValue = math.abs(value)\n    local sign = value / adjustedValue\n    local factor = 1 -- index of no prefix\n    while adjustedValue >= 999.5 and factor < #SI_PREFIXES do\n        adjustedValue = adjustedValue / 1000\n        factor = factor + 1\n    end\n\n    if adjustedValue < 9.95 then -- rounded to 10, show 1 decimal place\n        return string.format(\"%.1f\", sign * math.floor(adjustedValue * 10 + 0.5) / 10), SI_PREFIXES[factor] .. units\n    end\n    return string.format(\"%.0f\", sign * math.floor(adjustedValue + 0.5)), SI_PREFIXES[factor] .. units\nend\n\n--- Escapes % symbols that are not part of string format strings.\n-- @tparam string text The string to sanitize.\nfunction _G.Utilities.sanitizeFormatString(text)\n    text = string.gsub(text, \"%%([^sdf])\", \"%%%%%1\")\n    text = string.gsub(text, \"%%%%(%d*%.%d*f)\", \"%%%1\") -- allow float specifiers\n    text = string.gsub(text, \"%%$\", \"%%%%\") -- handle % at end of string\n    return text\nend\n\n--- Finds the first slot on 'unit' that has element class 'slotClass' and is not listed in the exclude list.\n-- @tparam string slotClass The element class of the target slot. May instead be a table containing a list of class names.\n-- @tparam table exclude A list of slots to exclude from search.\n-- @return The first element found of the desired type, or nil if none is found.\n-- @return The name of the slot where the returned element was found.\nfunction _G.Utilities.findFirstSlot(slotClass, exclude)\n    if type(slotClass) ~= \"table\" then\n        slotClass = {slotClass}\n    end\n    exclude = exclude or {}\n\n    for key, value in pairs(unit) do\n\n        -- ignore excluded elements\n        for _, exc in pairs(exclude) do\n            if value == exc then\n                goto continueOuter\n            end\n        end\n\n        if value and type(value) == \"table\" and value.getElementClass then\n            for _, class in pairs(slotClass) do\n                if value.getElementClass() == class then\n                    return value, key\n                end\n            end\n        end\n\n        ::continueOuter::\n    end\n\n    return nil, nil\nend\n\n-- Verifies the valid argument, if not true then it prints the provided message to the optional screen and to the programming board error log, halting execution.\n-- @param valid The condition to test, typically a boolean.\n-- @tparam string message The message to display on failure.\n-- @tparam ScreenUnit/ScreenSignUnit screen The optional screen for displaying the message on in case of failure.\nlocal function assertValid(valid, message, screen)\n    if not valid then\n        if screen and screen.setCenteredText and type(screen.setCenteredText) == \"function\" then\n            screen.setCenteredText(message)\n        end\n        error(message)\n    end\nend\n\n--- Attempts to verify the provided slot against the expected type, finding missing slot inputs in unit.\n-- @tparam Element provided A named slot that should fill the need for this type. May be nil.\n-- @tparam string targetClass The ElementClass to look for/validate against. May be a table containing a list of classes.\n-- @tparam ScreenUnit/ScreenSignUnit errorScreen A screen to display error messages to on failure.\n-- @tparam string moduleName The name of the module, to help disambiguate problems when multiple modules are run on the same controller.\n-- @tparam string mappedSlotName The internal name of the slot to indicate exactly what mapping failed.\n-- @tparam boolean optional True if this element is optional and should not produce an error on failure to map.\n-- @tparam string optionalMessage A message to print to the console on failure to map an optional element.\nfunction _G.Utilities.loadSlot(provided, targetClass, errorScreen, moduleName, mappedSlotName, optional, optionalMessage)\n    if type(targetClass) ~= \"table\" then\n        targetClass = {targetClass}\n    end\n    local slotName\n\n    local typedSlot = provided\n    if not (typedSlot and type(typedSlot) == \"table\" and typedSlot.getElementClass) then\n        typedSlot, slotName = _G.Utilities.findFirstSlot(targetClass)\n        if not optional then\n            assertValid(typedSlot, string.format(\"%s: %s link not found.\", moduleName, mappedSlotName), errorScreen)\n        end\n\n        if typedSlot then\n            system.print(string.format(\"Slot %s mapped to %s %s.\", slotName, moduleName, mappedSlotName))\n        elseif optionalMessage and string.len(optionalMessage) > 0 then\n            system.print(string.format(\"%s: %s\", moduleName, optionalMessage))\n        end\n    else\n        local class = typedSlot.getElementClass()\n        local valid = false\n        for _, tClass in pairs(targetClass) do\n            valid = valid or class == tClass\n        end\n        assertValid(valid, string.format(\"%s %s slot is of type: %s\", moduleName, mappedSlotName, class), errorScreen)\n    end\n    return typedSlot\nend\n\nlocal useParameterSettings = false --export: Toggle this on to override stored preferences with parameter-set values, otherwise will load from databank if available.\n-- can't export value from table, but would rather use it from the utilities object\n_G.Utilities.USE_PARAMETER_SETTINGS = useParameterSettings\n\n--- Returns the preferred preference value, storing that in the databank for future use if available. Type will be inferred from the default value provided.\n-- @param databank The databank to use for preferences.\n-- @tparam string key The databank preference key to look up/store to.\n-- @param defaultValue The value to use if the databank doesn't contain key.\n-- @return The preference value to use.\nfunction _G.Utilities.getPreference(databank, key, defaultValue)\n    local isBool = type(defaultValue) == \"boolean\"\n    local isNumber = type(defaultValue) == \"number\"\n    local prefValue\n\n    if databank then\n        if databank.hasKey(key) == 1 and not _G.Utilities.USE_PARAMETER_SETTINGS then\n            if isBool then\n                prefValue = databank.getIntValue(key) == 1\n            elseif isNumber then\n                prefValue = databank.getFloatValue(key)\n            else\n                prefValue = databank.getStringValue(key)\n            end\n        else\n            prefValue = defaultValue\n        end\n\n        if isBool then\n            local storeValue = 0\n            if prefValue then\n                storeValue = 1\n            end\n            databank.setIntValue(key, storeValue)\n        elseif isNumber then\n            databank.setFloatValue(key, tonumber(prefValue))\n        else\n            databank.setStringValue(key, prefValue)\n        end\n    else\n        prefValue = defaultValue\n    end\n\n    return prefValue\nend\n\nreturn _G.Utilities\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"8"},
        {"code":"--- Screen utils module.\n-- Frequently needed screen functions.\n-- @module ScreenUtils\n\n-- Guard to keep this module from reinitializing any time the start event fires if placed in libraries/system slot.\nif _G.ScreenUtils then\n    return\nend\n_G.ScreenUtils = {}\n\n--- Replaces a value from within a class attribute.\nfunction _G.ScreenUtils.replaceClass(html, find, replace)\n    -- ensure preceeded and followed by \" or space\n    return string.gsub(html, \"([\\\"%s])\" .. find .. \"([%s\\\"])\", \"%1\" .. replace .. \"%2\")\nend\n\n--- Adds an additional value to a class attribute.\nfunction _G.ScreenUtils.addClass(html, find, add)\n    -- ensure preceeded and followed by \" or space\n    return string.gsub(html, \"([\\\"%s]\" .. find .. \")([%s\\\"])\", \"%1 \" .. add .. \"%2\")\nend\n\n--- Returns the button that intersects the provided coordinates or nil if none is found.\n-- @tparam table buttonCoordinates Table of \"buttonLabel\" => {x1, y1, x2, y2} or \"buttonLabel\" => {1={x1, y1, x2, y2}, 2={x1, y1, x2, y2}, ...}\n-- @tparam number x The x screen position to test.\n-- @tparam number y The y screen position to test.\nfunction _G.ScreenUtils.detectButton(buttonCoordinates, x, y)\n    local found = false\n    local index = nil\n    for buttonLabel, coords in pairs(buttonCoordinates) do\n        if coords.x1 then\n            if x > coords.x1 and x < coords.x2 and y > coords.y1 and y < coords.y2 then\n                found = true\n            end\n        else\n            for i, innerCoords in pairs(coords) do\n                if innerCoords.x1 then\n                    if x > innerCoords.x1 and x < innerCoords.x2 and y > innerCoords.y1 and y < innerCoords.y2 then\n                        found = true\n                        index = i\n                    end\n                else\n                    break\n                end\n            end\n        end\n\n        -- test for inactive flag, reset found if not active\n        if found then\n            found = coords.active ~= false\n        end\n\n        if found then\n            return buttonLabel, index\n        end\n    end\n    return nil\nend\n\n--- Replaces the class for the currently moused-over button with the mouseoverClass\n-- @tparam table buttonCoordinates Table of \"buttonLabel\" => {x1, y1, x2, y2, class} or\n--  \"buttonLabel\" => {1={x1, y1, x2, y2}, 2={x1, y1, x2, y2}, ..., class=\"elementClass\"} or\n--  \"buttonLabel\" => {x1, y1, x2, y2, {class1, class2, ...}}\n-- @tparam number x The x screen position to test.\n-- @tparam number y The y screen position to test.\n-- @tparam string html The html document to update.\n-- @tparam string mouseoverClass The css class to replace the current button with.\nfunction _G.ScreenUtils.mouseoverButtons(buttonCoordinates, x, y, html, mouseoverClass)\n    local mouseover, index = _G.ScreenUtils.detectButton(buttonCoordinates, x, y)\n    -- nil doesn't concatenate nicely\n    index = index or \"\"\n\n    if mouseover then\n        if type(buttonCoordinates[mouseover].class) == \"table\" then\n            local newHtml = html\n            for _,findClass in pairs(buttonCoordinates[mouseover].class) do\n                newHtml = _G.ScreenUtils.replaceClass(newHtml, findClass, mouseoverClass)\n            end\n            return newHtml\n        else\n            local findClass = buttonCoordinates[mouseover].class .. index\n            return _G.ScreenUtils.replaceClass(html, findClass, mouseoverClass)\n        end\n    end\n    return html\nend\n\nreturn _G.ScreenUtils\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"9"}
    ],
    "methods":[],
    "events":[]
}
